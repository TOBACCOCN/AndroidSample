// #####plugin setting of old-version gradle plugin#####
//apply plugin: 'com.android.application'
//apply plugin: 'com.android.library'
//apply plugin: 'org.greenrobot.greendao'
//apply plugin: 'realm-android'
//apply plugin: 'io.objectbox'
// #####plugin setting of old-version gradle plugin#####

// #####plugin setting of new-version gradle plugin#####
plugins {
    alias(libs.plugins.android.application)
}
// #####plugin setting of new-version gradle plugin#####

ext {
    foo = 'bar'
    int_foo = 33
    list_foo = [1, 2]
    map_foo = [map_key: 'map_value']
}

android {
    namespace 'com.example.sample'

    buildFeatures {
        dataBinding true
        buildConfig true
    }

    signingConfigs {
        release {
            storeFile file('D:\\git\\AndroidSample\\sample.jks')
            storePassword System.getenv('KSTOREPWD')
            keyAlias 'sample'
            keyPassword System.getenv('KEYPWD')
        }
    }

    // compileSdk、compileSdkVersion(deprecated)
     compileSdk rootProject.ext.compileSdk      // this is required
     // buildToolsVersion = rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.example.sample"
        // minSdk、minSdkVersion
         minSdk rootProject.ext.minSdk
        // targetSdk、targetSdkVersion
        targetSdk rootProject.ext.targetSdk       // if not set, default is minSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    buildTypes {
        String build_time = "\"" + new Date().format("yyyyMMddHHmm") + "\""
        debug {
            buildConfigField "String", "HOST", '"https://www.baidu.com"'
            buildConfigField "String", "BUILD_TIME", "${build_time}"
            buildConfigField "int", "MAX_THRESHOLD", '7'
            resValue ("string", "build_time", "${build_time}")
            ext.alwaysUpdateBuildId = false
            minifyEnabled false
            shrinkResources false
        }
        release {
            buildConfigField "String", "HOST", '"https://www.google.com"'
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions = ['mode', 'api']
    productFlavors {
        free {
            dimension 'mode'
            applicationIdSuffix '.free'
            versionNameSuffix '-free'
        }
        paied {
            dimension 'mode'
            applicationIdSuffix '.paied'
            versionNameSuffix '-paied'
        }
        minApi24 {
            dimension 'api'
            minSdk 24
            versionNameSuffix '-minApi24'
        }
        minApi25 {
            dimension 'api'
            versionNameSuffix '-minApi25'
            minSdk 25
        }
    }

    variantFilter {
        variant -> {
            def flavor = variant.flavors*.name
            def type = variant.buildType*.name
            if (flavor.contains("minApi24") && flavor.contains("free") && type.contains("debug")) {
                setIgnore(true)
            }
        }
    }

    // 使用 lambda 表达式，需要使用该配置
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //    greendao {
    //        //数据库的 schema 版本，也可以理解为数据库版本号
    //        schemaVersion 1
    //        //设置 DaoMaster、DaoSession、Dao 包名，也就是要放置这些类的包的全路径。
    //        daoPackage 'com.example.sample.dao'
    //        //设置 DaoMaster、DaoSession、Dao 目录
    //        targetGenDir 'src/main/java'
    //    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }

    // 依赖本地原生模块(c/cpp 代码模块)，右键模块选择 Add C++ to Module 并选择 Create CMakeLists.txt.... 后，会自动添加下面的 externalNativeBuild 配置
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    // 依赖本地原生模块时，可以选择配置 ndk 路径，如果不配置会自动下载并默认使用与 gradle 插件匹配的 ndk
    ndkPath "D:\\env\\Android\\SDK\\ndk\\25.1.8937393"
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation project(":lib")
    implementation libs.appcompat
    // preference 可以使用 PreferenceFragmentCompat
    implementation libs.preference
    implementation libs.constraintlayout
    // xlog
    implementation libs.xlog
    // greenDAO
    implementation libs.greendao
    // sqlcipher
    implementation libs.android.database.sqlcipher
    // WCDB
    implementation libs.wcdb.android
    // MQTT
    implementation libs.mqttv3
    // MMKV
    implementation libs.mmkv.static
    // kotlin
    //    implementation libs.kotlin.stdlib
    // glide
    implementation libs.glide
    implementation libs.legacy.support.v4
    annotationProcessor libs.glide.compiler
    // okhttp
    implementation libs.okhttp
    implementation libs.material
    implementation libs.navigation.fragment
    implementation libs.navigation.ui

    // com.android.application 8.2.0-alpha15 插件的依赖有问题，版本没设置好，导致出现重复类
    // Duplicate class kotlin.collections.jdk8.CollectionsJDK8Kt found in modules jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10) and jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)
    // Duplicate class kotlin.internal.jdk7.JDK7PlatformImplementations found in modules jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10) and jetified-kotlin-stdlib-jdk7-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.21)
    implementation libs.kotlin.stdlib.jdk7
    implementation libs.kotlin.stdlib.jdk8

    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
}